SCAFFOLD FOUNDRY PROJECT:
forge init --force/ forge init INPUT_FILE_NAME

COMPILE IN FOUNDRY:
forge build

TEST IN FOUNDRY:
forge test

DEPLOY AND VERIFY ON FOUNDRY USING SCRIPTS:
forge script EventTicketingScript --rpc-url https://rpc.sepolia-api.lisk.com --etherscan-api-key 123 --verify --verifier blockscout  --verifier-url https://sepolia-blockscout.lisk.com/api --private-key $PRIVATE_KEY --broadcast

VERIFY ON FOUNDRY WITHOUT SCRIPTS:
forge verify --contract CONTRACT_ADDRESS CONTRACT_NAME --chain CHAIN_ID NETWORK_NAME


SCAFFOLD HARDHAT PROJECT:
PNPM
pnpm init
pnpm add -D hardhat
pnpx hardhat init

NPM
npx hardhat init

COMPILE WITH HARDHAT:
npx hardhat compile

DEPLOY CONTRACT IN HARDHAT:
npx hardhat ignition deploy ignition/modules/FILE_NAME.js --network NETWORK_NAME

VERIFY CONTRACT IN HARDHAT:
npx hardhat verify --network NETWORK_NAME DEPLOYED_ADDRESS

TEST PROJECT IN HARDHAT:
npx hardhat test


INSTALL OPENZEPPELIN:
Hardhat installation:
npm install @openzeppelin/contracts

foundry installation:
forge install OpenZeppelin/openzeppelin-contracts

CREATE TOKEN WITH OPENZEPPELIN:
pragma solidity ^0.8.20;

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract TicketToken is ERC20 {
    constructor(uint256 initialSupply) ERC20("Ticket", "TKT") {
        _mint(msg.sender, initialSupply);
    }
}

CREATE NFT WITH OPENZEPPELIN:
// SPDX-License-Identifier: MIT
pragma solidity 0.8.30;
import {ERC721, ERC721URIStorage} from "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";


contract TicketNft is ERC721URIStorage, Ownable(msg.sender){

     uint256 private _tokenIds;

    constructor() ERC721("EVENTWEB3", "EVW") {}
    

    function mintNFT(address recipient, string memory tokenURI)
        public 
        returns (uint256)
    {
        _tokenIds++;
        uint256 newItemId = _tokenIds;

        _mint(recipient, newItemId);
        _setTokenURI(newItemId, tokenURI);

        return newItemId;
    }
}


UNISWAP V2 

IMPORTS:
import {ethers} from "hardhat";
const helpers = require("@nomicfoundation/hardhat-network-helpers");

IMPERSONATE ADDRESS:
await helpers.impersonateAccount(AssetHolderAddress);
    const impersonatedSigner = await ethers.getSigner(AssetHolderAddress);

ACCESS FUNCTIONS IN INTERFACE:
const TOKEN = await ethers.getContractAt("Interface", TokenAddress);

SET DEADLINE:
    const deadline = Math.floor(Date.now()/1000) +60 *10;
