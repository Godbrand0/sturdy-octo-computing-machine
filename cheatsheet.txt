SCAFFOLD FOUNDRY PROJECT:
forge init --force/ forge init INPUT_FILE_NAME

COMPILE IN FOUNDRY:
forge build

TEST IN FOUNDRY:
forge test

DEPLOY AND VERIFY ON FOUNDRY USING SCRIPTS:
forge script EventTicketingScript --rpc-url https://rpc.sepolia-api.lisk.com --etherscan-api-key 123 --verify --verifier blockscout  --verifier-url https://sepolia-blockscout.lisk.com/api --private-key $PRIVATE_KEY --broadcast

VERIFY ON FOUNDRY WITHOUT SCRIPTS:
forge verify --contract CONTRACT_ADDRESS CONTRACT_NAME --chain CHAIN_ID NETWORK_NAME


SCAFFOLD HARDHAT PROJECT:
PNPM
pnpm init
pnpm add -D hardhat
pnpx hardhat init

NPM
npx hardhat init

COMPILE WITH HARDHAT:
npx hardhat compile

DEPLOY CONTRACT IN HARDHAT:
npx hardhat ignition deploy ignition/modules/FILE_NAME.js --network NETWORK_NAME

VERIFY CONTRACT IN HARDHAT:
npx hardhat verify --network NETWORK_NAME DEPLOYED_ADDRESS

HARDHAT CONFIG FOR MAINNET FORKING:
import { HardhatUserConfig } from "hardhat/config";
import "@nomicfoundation/hardhat-toolbox";

const config: HardhatUserConfig = {
  solidity: "0.8.30",
  networks:{
    hardhat:{
      forking:{
        url: "https://eth-mainnet.g.alchemy.com/v2/API_KEY"
      },
    },
  },
};

export default config;

HARDHAT CONFIG FOR DEPLOYING:
require("@nomicfoundation/hardhat-toolbox");

/** @type import('hardhat/config').HardhatUserConfig */

module.exports = {
  solidity: "0.8.30",
  networks: {
    'lisk-sepolia': {
      url: 'https://rpc.sepolia-api.lisk.com',
     
      accounts: [vars.get("PRIVATE_KEY")],
    },
  },
  etherscan: {
    // Use "123" as a placeholder, because Blockscout doesn't need a real API key, and Hardhat will complain if this property isn't set.
    apiKey: {
      "lisk-sepolia": "123"
    },
    customChains: [
      {
          network: "lisk-sepolia",
          chainId: 4202,
          urls: {
              apiURL: "https://sepolia-blockscout.lisk.com/api",
              browserURL: "https://sepolia-blockscout.lisk.com"
          }
      }
    ]
  },
 sourcify: {
    enabled: false
  },
};

TEST PROJECT IN HARDHAT:
npx hardhat test

HARDHAT TEST SETUP:
import { loadFixture } from "@nomicfoundation/hardhat-toolbox/network-helpers";
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import { expect } from "chai";
import {ethers}  from "hardhat";
import hre from "hardhat";

describe("input_name", function () {

  async function deploy_project_name() {
 Contracts are deployed using the first signer/account by default
    const [owner, firstAddress, secondAddress] =
      await hre.ethers.getSigners();
    

     const project_name = await hre.ethers.getContractFactory("contract_name");
      
    const project_reference = await project_name.deploy([owner.address,firstAddress.address, secondAddress.address]);

     return { project_name, owner, firstAddress, secondAddress};

      describe("test_case", function () {
     it("test_case_description", async function () {
       const { project_name, owner } = await loadFixture(deploy_project_name);

       expect(await project_name.getAddress()).to.be.properAddress;
     });
 

   
      })
   });


INSTALL OPENZEPPELIN:
Hardhat installation:
npm install @openzeppelin/contracts

foundry installation:
forge install OpenZeppelin/openzeppelin-contracts

CREATE TOKEN WITH OPENZEPPELIN:
pragma solidity ^0.8.20;

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract TicketToken is ERC20 {
    constructor(uint256 initialSupply) ERC20("Ticket", "TKT") {
        _mint(msg.sender, initialSupply);
    }
}

CREATE NFT WITH OPENZEPPELIN:
// SPDX-License-Identifier: MIT
pragma solidity 0.8.30;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

contract MockERC721 is ERC721 {
    constructor(string memory name, string memory symbol) ERC721(name, symbol) {}

    function mint(address to, uint256 tokenId) public {
        _mint(to, tokenId);
    }
}


UNISWAP V2 

IMPERSONATE ADDRESS:
await helpers.impersonateAccount(AssetHolderAddress);
    const impersonatedSigner = await ethers.getSigner(AssetHolderAddress);

ACCESS FUNCTIONS IN INTERFACE:
const TOKEN = await ethers.getContractAt("Interface", TokenAddress);

SET DEADLINE:
    const deadline = Math.floor(Date.now()/1000) +60 *10;

    MAINNET FORKING SETUP:
    import helper = require("@nomicfoundation/hardhat-network-helpers");
import { ethers } from "hardhat";

async function project_name() {}
project_name().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
